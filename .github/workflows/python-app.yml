# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "playlist_lister", "trunk" ]
  pull_request:
    branches: [ "playlist_lister", "trunk" ]

permissions:
  contents: read


jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        # Poetry 1.2.x wants Python 3.10
        python-version: ["3.10", "3.11"]
        poetry-version: ["1.2.2"]
        os: [ubuntu-20.04, macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version:  ${{ matrix.poetry-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry install
          pip install flake8 pytest
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Mypy
        run: poetry run mypy .
      - name: Black
        run: poetry run black --check .
      - name: Test and coverage with pytest
        run: |
          poetry run coverage run -m pytest && poetry run coverage report -m
